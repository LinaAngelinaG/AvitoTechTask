// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/history/:uid/:year/:month": {
            "get": {
                "description": "Returns the link to download the CSV-file with history of all user's activities in segments: adding or deleting in period of seted month and the year.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_in_segment"
                ],
                "summary": "GetUserHistory",
                "operationId": "get-history-of-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "USER_ID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "YEAR",
                        "name": "year",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "MONTH",
                        "name": "month",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "got list of segments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userinsegment.UserInSegmentsHistory"
                            }
                        }
                    },
                    "400": {
                        "description": "there is no 'parameter_name' in context or it's wrong value",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "418": {
                        "description": "error with getting history",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/segment/:name": {
            "post": {
                "description": "Create segment with its name that is sent as parameter of http-request. 'segment_id' is autoinremented in DB while inserting, 'active' set to default value 'true'.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "segment"
                ],
                "summary": "CreateSegment",
                "operationId": "delete-segment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SEGMENT NAME",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "segment created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "there is no segment_name in context",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "418": {
                        "description": "error with creating entity example",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete segment with its name that is sent as parameter of http-request. Don't phisically delete segment, just set its parameter 'active' from value 'true' to 'false'. Also delete users from that segment: change null-values of 'out_date' in table user_in_segment to current_date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "segment"
                ],
                "summary": "DeleteSegment",
                "operationId": "delete-segment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SEGMENT NAME",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "segment deleted from users",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Something wrong with deleting segment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/:uid": {
            "get": {
                "description": "Provide JSON with values {\"userId\": someId, \"segments\":['seg_name_1','seg_name_2',...]]}, that contains pare of user_id and all active segments of this user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_in_segment"
                ],
                "summary": "GetListOfSegments",
                "operationId": "get-list-of-user-segments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "USER_ID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userinsegment.UserSegmentsList"
                        }
                    },
                    "400": {
                        "description": "there is no user_id in context or its wrong value",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "error with marshalling list of segments",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "418": {
                        "description": "error with getting list of segments",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/segments": {
            "post": {
                "description": "Create new user_in_segment sequence with provided data, only if provided segment exists. If body contains 'period' value - creating user_in_segment sequence with out_date = current_date + period.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_in_segment"
                ],
                "summary": "AddUserSegments",
                "operationId": "add-segments-to-user",
                "parameters": [
                    {
                        "description": "SEGMENTS LIST FOR USER",
                        "name": "segments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userinsegment.UserSegmentsList"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "segments added to user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Something wrong with addding segment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Iterates throuth the list of sent segment_names and delete each of row that have such user_id value and segment_id value. Not literally delete, but update value 'out_date' to current_date if it's null.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_in_segment"
                ],
                "summary": "DeleteListOfSegments",
                "operationId": "delete-user_in_segment",
                "parameters": [
                    {
                        "description": "SEGMENTS LIST FOR USER",
                        "name": "segments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userinsegment.UserSegmentsList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user deleted from segments",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Something wrong with deleting segment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "userinsegment.UserInSegmentsHistory": {
            "type": "object",
            "properties": {
                "event": {
                    "type": "string"
                },
                "event_date": {
                    "type": "string"
                },
                "segment_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "userinsegment.UserSegmentsList": {
            "type": "object",
            "properties": {
                "period": {
                    "type": "integer"
                },
                "segment_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:1234",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "AvitoTechTask App API",
	Description:      "API Server for AvitoTechTask Application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
